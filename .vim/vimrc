""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Avalable commands:
"
" * Ctrl+N > Switching between relative and absolute line numbers
" * Ctrl+N/P > Show autocomplete
" * Ctrl+F > Stop highlighting after a search
" * Ctrl+J/K/L/H > Navigate between split layouts
" * F3 > Toggle paste mode
" * F4 > Toggle indentation lines
" * F10 > Open NERD Tree
" * F11 > Open Gblame (fugitive)
" * F12 > Toggle search highlight on and off
" * ,vsrc > Open vimrc in new tab
" * ,src > Load (source) vimrc file
" * ,w > Toggle wrap - unwrap lines longer that screen width
" * ,bg > Toggle background (light/dark)
" * ,, > Stop highlighting after a search
" * :W > Sudo saves
" * Up/Down > Go up and down line by line visually
" * J/K > Go up and down line by line (skip visual line breaks)
"
" Commands created by plugins:
"
" * :PluginInstall > Install plugins
"
" * sxy > Search xy sequence and navigate to 1st match seq after cursor
" * Sxy > Search xy sequence and navigate to 1st match seq before cursor
" * ; > After sxy, go to next match. We can also jump N seq with N;
" * ''/Ctrl+O > After sxy and ;'s, go back to first match
" * s+ENTER > Repeat last search sxy
"
" * mx > Toggle mark 'x' and display it in the leftmost column
" * dmx > Remove mark 'x' where x is a-zA-Z
" * m, > Place the next available mark
" * m. > If no mark on line, place the next available mark. Otherwise, remove (first) existing mark.
" * m- > Delete all marks from the current line
" * m+SPACE > Delete all marks from the current buffer
" * ]` > Jump to next mark
" * [` > Jump to prev mark
" * ]' > Jump to start of next line containing a mark
" * [' > Jump to start of prev line containing a mark
" * `] > Jump by alphabetical order to next mark
" * `[ > Jump by alphabetical order to prev mark
" * '] > Jump by alphabetical order to start of next line having a mark
" * '[ > Jump by alphabetical order to start of prev line having a mark
" * m/ > Open location list and display marks from current buffer
" * m[0-9] > Toggle the corresponding marker !@#$%^&*()
" * m<S-[0-9]> > Remove all markers of the same type
" * ]- > Jump to next line having a marker of the same type
" * [- > Jump to prev line having a marker of the same type
" * ]= > Jump to next line having a marker of any type
" * [= > Jump to prev line having a marker of any type
" * m? > Open location list and display markers from current buffer
" * m+BACKSPACE > Remove all markers
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/bundle")
    call mkdir($HOME."/.vim/bundle", "", 0770)
endif

if !isdirectory($HOME."/.vim/bundle/Vundle.vim")
    echo $HOME."/.vim/bundle/Vundle.vim"
    echo "---------------------------------------------------------------------------------------"
    echo "| Vundle not found, run the following command:                                        |"
    echo "| git clone https://github.com/VundleVim/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim  |"
    echo "---------------------------------------------------------------------------------------"
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle (extension/plugin manager) setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make vim non-compatible with vi, increasing vim capabilities. This must be 1st!
set nocompatible  " This will set formatoptions to tcq 
filetype off      " Required to use vundle
" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here

" Folds for Python
"Plugin 'tmhedberg/SimpylFold'
" Autoindent for Python
"Plugin 'vim-scripts/indentpython.vim'
" Autocomplete (may require extra steps, check https://github.com/Valloric/YouCompleteMe)
"Bundle 'Valloric/YouCompleteMe'
" Railscasts theme
Bundle 'jpo/vim-railscasts-theme'
" Solarized theme
Bundle 'altercation/vim-colors-solarized'
" Gruvbox theme
Bundle 'morhetz/gruvbox'
" Command-T
"Bundle 'wincent/Command-T'
" NERDTree
Bundle 'scrooloose/nerdtree'
" ACK for vim
"Bundle 'mileszs/ack.vim'
" vim-rails
"Bundle 'tpope/vim-rails'
" vim-fugivitve (git)
"Bundle 'tpope/vim-fugitive'
" vim-cucumber
"Bundle 'tpope/vim-cucumber'
" vim-bufexplorer
"Bundle 'slack/vim-bufexplorer'
" tcomment
"Bundle 'tomtom/tcomment_vim'
" Airline, great status bar
Bundle 'vim-airline/vim-airline'
" Navigate doing searches with 2 chars: s+char+char. Next with ;. Start over with ''
Bundle 'justinmk/vim-sneak'
" Show indentation levels
"Bundle 'nathanaelkane/vim-indent-guides'
" Show indentation levels
Plugin 'Yggdroot/indentLine'
" Color parenthesis that go together
Plugin 'junegunn/rainbow_parentheses.vim'
" Show to left of numbers line info about what was modified from git
Plugin 'airblade/vim-gitgutter.git'
" Toggle, display and navigate marks (jump between interesting parts of the file)
Plugin 'kshenoy/vim-signature'

" All of your Plugins must be added before the following line

call vundle#end()  " Load all plugins
" Enable filetype again
filetype on        " Try to recognize filetype
filetype indent on " Load indent file for filetype detected from ~/.vim/indent
filetype plugin on " Load plugin file for filetype detected from ~/.vim/ftplugin

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Format options, dictates when line breaks are introduced automatically
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set preferred format options
set textwidth=99      " A line jump will be entered after 99 chars (see fo t, c, l)
set formatoptions-=t  " No new line added after textwidth chars in line
set formatoptions+=c  " Insert new line after textwidth when writing comments
set formatoptions+=r  " Insert comment leader when hitting ENTER in insert mode
set formatoptions+=o  " Insert comment leader in new line when using o/O in comment
set formatoptions+=j  " Remove a comment leader when joining lines
set formatoptions+=l  " If line length > textwidth when insert starts don't break it
set formatoptions+=q  " Allow formatting of comments with 'gq'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shortcuts and key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :W sudo saves the file (for handling permission-denied errors)
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Navigarte between split layouts (create them with :sp, :vsp, :vs, :sv)
nnoremap <C-J> <C-W><C-J>  " Move down with Ctrl+J
nnoremap <C-K> <C-W><C-K>  " Move up with Ctrl+K
nnoremap <C-L> <C-W><C-L>  " Move left with Ctrl+L
nnoremap <C-H> <C-W><C-H>  " Move right with Ctrl+H

" Add plugin shortcuts
nnoremap <F10> :NERDTreeToggle<cr>       " Key to open NERDTree in commands mode
nnoremap <F11> :Gblame<cr>               " Open git blame
inoremap <F10> <Esc>:NERDTreeToggle<cr>  " Key to open NERDTree in insert mode

" Enable/disable paste mode (does not indent every line) with F3
nnoremap <F3> :set paste!<CR>
inoremap <F3> <ESC>:set paste!<CR>a
vnoremap <F3> <ESC>:set paste!<CR>gv

" Show/hide indents
nnoremap <F4> :IndentLinesToggle<CR>
inoremap <F4> <ESC>:IndentLinesToggle<CR>a
vnoremap <F4> <ESC>:IndentLinesToggle<CR>gv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader definitions and uses
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","    " Set <leader> to comma
let g:mapleader = ","  " Set <leader> to comma

" Writing <lader>vsrc will open vimrc in a new tab
nnoremap <leader>vsrc :tabe $MYVIMRC<cr>
" Writing <lader>src will load vimrc changes
nnoremap <leader>src :source $MYVIMRC<cr>
" Every time vimrc is modified, it is loaded (sourced) again
autocmd bufwritepost .vimrc source $MYVIMRC

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Select colors
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting: text can be shown in different fonts and colors
if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif
" Variable to choose preferred colorscheme
let color_scheme = "gruvbox"
colorscheme default
if color_scheme == "railcasts"
    " Try to use fancier colorscheme, use default if not found
    silent! colorscheme railcasts
elseif color_scheme == "solarized"
    " Try to use fancier colorscheme, use default if not found
    let g:solarized_termcolors=256
    silent! colorscheme solarized
    call togglebg#map("")  " Allows to use :ToggleBG to toggle background (light/dark)
elseif color_scheme == "gruvbox"
    " Try to use fancier colorscheme, use default if not found
    let g:gruvbox_contrast_dark="hard"
    let g:gruvbox_contrast_light="hard"
    let g:gruvbox_number_column="bg1"
    silent! colorscheme gruvbox
elseif color_scheme == "default"
    " Default colorsheme
    silent! colorscheme default
endif
" Choose default background color (light/dark)
set background=dark
" Create keymap <leader>bg to toggle background between light/dark
nnoremap <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spaces and tabs, visual and misc setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=4      " Number of visual spaces per TAB
set softtabstop=4  " Num spaces tab when editing (if we TAB, we enter N spaces)
set shiftwidth=4   " Num spaces tab when editing (if we TAB, we enter N spaces)
set expandtab      " Tabs are spaces (great for python and bash)
set autoindent     " Copy indent from current line to next when starting new line
set smarttab       " Insert tabstop spaces when the TAB key is pressed
set shiftround     " Round indentation to multiple of shiftwidth when shifting

set showmatch      " Highlight matching [{()}]
set showcmd        " Show command being typed in status bar (bottom right)
set cursorline     " Highlight current line
"highlight CursorLine cterm=NONE ctermbg=233  " Define style highlight line
set scrolloff=1    " Set to 9999 to see cursor always in the middle of screen
set sidescrolloff=5  " Number of columns to keep left and right of cursor
set display+=lastline  " Always try to show a paragraph’s last line
set wrap           " Wrap line in multiple lines if it is wider than screen
set linebreak      " Avoid wrapping a line in the middle of a word
set laststatus=2   " Always display status bar
set ruler          " Show cursor position is status bar

set backspace=indent,eol,start  " Backspace removes indents and line jumps
set lazyredraw     " Vim redraws screen too often, redraw only when we need to
set autowrite      " Automatically save before commands like :next and :make
set hidden         " Hide buffers when they are abandoned
set mouse=a        " Enable mouse usage (all modes). Mouse will move cursor, etc.
set novisualbell   " Disable beep on error
set noerrorbells   " Disable flash on error
set nrformats-=octal  " Interpret octal as decimal when incrementing numbers
set autoread       " Relod files if not modified inside Vim
set nomodeline     " Ignore file’s mode lines, use vimrc config instead
set ttimeout       " Wait to see if more chars come after cmd, if not run it
set ttimeoutlen=200  " How may ms to wait before moving on
set tabpagemax=50  " At most 50 tabs can be opened

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Best search setup
set ignorecase     " Do case insensitive matching
set smartcase      " Case insensitive match if no uppercase, else case sensitive
set incsearch      " Incremental search, show the next matching while typing
set wrapscan       " When we get to end search, go back to beginning
set hlsearch       " Highlight all results in file when searching
" Use Ctrl+M to clear the highlighting of :set hlsearch
nnoremap <C-F> :noh<CR>
nnoremap <silent> <Leader><Leader> :noh<CR>
" F12 toggle highlight on and off
nnoremap <F12> :set hls!<CR>
inoremap <F12> <ESC>:set hls!<CR>a
vnoremap <F12> <ESC>:set hls!<CR>gv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding (hiding or showing content)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Select fold mode
set foldmethod=indent  " Folds are created manually
set foldnestmax=3      " Only fold up to three nested levels
set nofoldenable       " Disable folding by default

" Open fold with space, and create fold with space after visually selecting
"nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<cr>
"vnoremap <Space> zf
"nnoremap <Space> za

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocomplete magic 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Select complete options 
set wildmenu       " Visual autocomplete for command menu
set wildmode=longest,full  " Autocomplete in status bar
set complete-=i    " When completing (Ctrl+P, Ctrl+N), ignore included files
set completeopt=longest,menuone  " Complete longest word, show menu if one option
" Enable omni completion
if has("autocmd") && exists("+omnifunc")
    autocmd Filetype * if &omnifunc == "" | setlocal omnifunc=syntaxcomplete#Complete | endif
endif
" When the menu appears, the 1st completion option gets highlighted automatically
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
inoremap <expr> <C-p> pumvisible() ? '<C-p>' : '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<cr>'
" Only useful if we use Omni
inoremap <expr> <M-,> pumvisible() ? '<C-n>' : '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
" Check AutoComplPop and SuperTab plugins
" YouCompleteMe Plugin config
" Ensures autocomplete window goes away when you’re done with it
let g:ycm_autoclose_preview_window_after_completion=1
" Map Ctrl+D to go to definition of function
nnoremap <C-d> :YcmCompleter GoToDefinitionElseDeclaration<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Change between wrap and nowrap mode with <leader>w
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map up and down to navigate visually (following visual line breaks) 
nnoremap <silent> <Leader>w :call ToggleWrap()<cr>
function! ToggleWrap()
if &wrap
    echo "wrap off"
    setlocal nowrap
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
else
    echo "wrap on"
    setlocal wrap linebreak nolist
    setlocal display+=lastline
    nnoremap <buffer> <silent> <Up>   gk
    nnoremap <buffer> <silent> <Down> gj
    nnoremap <buffer> <silent> <Home> g<Home>
    nnoremap <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Permanent undo and file management
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Create folders if necessary
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
if !isdirectory($HOME."/.vim/swap-file")
    call mkdir($HOME."/.vim/swap-file", "", 0700)
endif
" Move viminfo into ~/.vim folder
set viminfo+=n~/.vim/viminfo
" Save undo info to allow undo even after reopening file
set undodir=$HOME/.vim/undo-dir " Directory undo files
set undofile                    " Create undo file
set history=1000                " Increase the undo limit
" Disable backup file
set backupdir=$HOME/.vim        " Directory to store backup files
set nobackup                    " Disable backups
" Move swap files into ~/.vim/swap-file
set dir=$HOME/.vim/swap-file    " Directory to store swap files
set swapfile                    " Enable swap files

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cursor position remembered
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Jump to last position when reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shared clipboard
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Share vim clipboard and OS clipboard
set clipboard=unnamed
if has('clipboard') == 0
    echo "Vim is not compiled with the +clipboard feature."
    echo "You should install a different version to be able to paste your clipboard."
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart line numbers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" See relative numbers when starting vim
set relativenumber
" Functions to toggle absolute or relative numbers
function! ToggleNumbersOn()
    set relativenumber!
    set number
endfunction
function! ToggleRelativeOn()
    set number!
    set relativenumber
endfunction
" See absolute line numbers when console loses focus, switch to relative when back
autocmd FocusLost * call ToggleNumbersOn()
autocmd FocusGained * call ToggleRelativeOn()
" See absolute line numbers on i, see relative line numbers on ESC
autocmd InsertEnter * call ToggleNumbersOn()
autocmd InsertLeave * call ToggleRelativeOn()
" Allow toggling between relative and absolute line numbers with command Ctrl + n
function! NumberToggle()
    if(&relativenumber == 1)
        call ToggleNumbersOn()
    else
        call ToggleRelativeOn()
    endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugind config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"set noshowmode  " Don't print --INSERT-- in insert mode, info already in status

" Rainbow parentheses
let g:rainbow#blacklist = [248]  " Blacklist color of comments

" IndentLine
let g:indentLine_enabled = 0  " Indentation guidelines hidden by default

" GitGutter
set updatetime=1000  " Updates happen every 1s (default was 4s)

