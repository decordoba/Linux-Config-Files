""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Available commands:
"
" * Ctrl+N > Switching between relative and absolute line numbers
" * Ctrl+N/P > Show autocomplete
" * Ctrl+F > Stop highlighting after a search
" * Ctrl+D > Save file
" * Ctrl+J/K/L/H > Navigate between split layouts
" * Ctrl+Left/Right > Navigate between tabs (gt and gT should also work)
" * Ctrl+Up/Down > Move tabs
" * F3 > Toggle paste mode
" * F4 > Toggle indentation lines
" * F5 > Remove trailing spaces (extra spaces at the beginning and end of the line)
" * F8 > Put everyting in buffers in tabs, or put everything in tabs in a buffer
" * F10 > Open NERD Tree
" * F12 > Toggle search highlight on and off
" * ,vsrc > Open vimrc in new tab
" * ,src > Load (source) vimrc file
" * ,w > Toggle wrap - unwrap lines longer that screen width
" * ,bg > Toggle background (light/dark)
" * ,d > Go to definition function
" * ,s > In visual mode, sort selected lines alpbabetically
" * ,e > Close current buffer
" * ,E > Close all buffers
" * ,m > Toggle mouse (controlled by vim or by terminal)
" * ,n > Toggle column on the left, (copy with cursor after ,m without copying numbers)
" * ,, > Stop highlighting after a search
" * :W > Sudo saves
" * Up/Down > Go up and down line by line visually
" * J/K > Go up and down line by line (skip visual line breaks)
"
" * :tabedit {file} > edit specified file in a new tab
" * :tabfind {file} > open a new tab with filename given, searching the 'path' to find it
" * :tabclose > close current tab
" * :tabclose {i} > close i-th tab
" * :tabonly > close all other tabs (show only the current tab)
" * :tab ball > show each buffer in a tab (up to 'tabpagemax' tabs)
" * :tab help > open a new help window in its own tab page
" * :tab drop {file} > open {file} in a new tab, or jump to window/tab containing the file if it exists
" * :tab split        copy the current window to a new tab of its own
"
" * :bn > Next buffer
" * :bp > Previous buffer
" * :b # > Show buffer #
" * :b name > Show buffer of file name
" * Ctrl+6 > Switch between buffers (the last two buffers used)
" * # Ctrl+6 > Switch to buffer #
"
" Insert mode commands:
" * AA, II, OO, CC, SS, DD, BB, TT, FF, VV, UU, RR, qq, QQ, yy, YY, PP, XX, WW, EE, BB, JJ, KK,
"   HH, LL, >>, <<, //, \\
"
" Commands created by plugins:
"
" VUNDLE
" * :PluginInstall > Install plugins
"
" VIM-SNEAK
" * sxy > Search xy sequence and navigate to 1st match seq after cursor
" * Sxy > Search xy sequence and navigate to 1st match seq before cursor
" * ; > After sxy, go to next match. We can also jump N seq with N;
" * '' / Ctrl+O > After sxy and ;'s, go back to first match
" * s+ENTER > Repeat last search sxy
"
" VIM-SIGNATURE
" * mx > Toggle mark 'x' and display it in the leftmost column
" * dmx > Remove mark 'x' where x is a-zA-Z
" * m, > Place the next available mark
" * m. > If no mark on line, place the next available mark. Otherwise, remove (first) existing mark.
" * m- > Delete all marks from the current line
" * m+SPACE > Delete all marks from the current buffer
" * ]` > Jump to next mark
" * [` > Jump to prev mark
" * ]' > Jump to start of next line containing a mark
" * [' > Jump to start of prev line containing a mark
" * `] > Jump by alphabetical order to next mark
" * `[ > Jump by alphabetical order to prev mark
" * '] > Jump by alphabetical order to start of next line having a mark
" * '[ > Jump by alphabetical order to start of prev line having a mark
" * m/ > Open location list and display marks from current buffer
" * m[0-9] > Toggle the corresponding marker !@#$%^&*()
" * m<S-[0-9]> > Remove all markers of the same type
" * ]- > Jump to next line having a marker of the same type
" * [- > Jump to prev line having a marker of the same type
" * ]= > Jump to next line having a marker of any type
" * [= > Jump to prev line having a marker of any type
" * m? > Open location list and display markers from current buffer
" * m+BACKSPACE > Remove all markers
"
" VIM-FUGITIVE
" * :Git [args] > Run any git command. i.e. :Git st
" * :Git add % > Add current file (% means current file, also works with rm, mv, co...)
" * :Gwrite > Same as git add %
" * :Git checkout % > Undo all changes since last commit in file, but leave changes in buffer. A
"                     dialog will pop up saying that the file has changed, and to decide what to do
" * :Gitread > Load file saved in last commit, trash the contents of buffer
" * :Gremove > Wipe out buffer and remove current file
" * :Gmove [new_name] > Move current file to new name (and location), and change buffer name too.
"                       Adding a / in front of file (:Gmove /file.txt) puts it in root of git repo
" * :Gcommit > Open split window to write commit message, & Ctrl+N autocomplete (function names, etc.)
" * :Gblame > See what changes were made when, where, and by who, while maintaining sysntax highlight
" * :Gdiff > Diff with current file and commited version!
" * :Gstatus > Show git status, ctrl+N and ctrl+P to cahge between files
"              Use '-' key to add or reset files (WHAAAT?). Also works in visual mode
"              Use 'p' key to do git add -p (patch) in a file
"              Use ENTER to see a file
"              Use Shift+C to commit
" * ...
"
" PYTHON-MODE
" * K > show python documentation
" * ,r > run python code
" * ,b > Insert/remove breakpoint
" * Ctrl+C+g > Goto definition
" * Ctrl+SPACE > Autocomplete
" * [[ / ]] > Jump to prev/next class or function (in global level)
" * [M / ]M > Jump to prev/next function (inside classes too)
" * aC / iC > Select a class / inner class. Ex: vaC, viC, daC, diC, yaC, yiC, caC ciC
" * aM / iM > Select a function / inner function. Ex: vaM, daM, yaM, caM, viM, diM, yiM, ciM
"
" PYTHON-FOLDING
" * f > fold/unfold class
" * F > fold/unfold all classes
"
" NERD COMMENTER
" * ...
"
" VIM-UNPAIRED
" * ...
"
" CTRLP
" * Ctrl+P > Open file in folder / buffer / recent file
" * Ctrl+F / Ctrl+B (inside CtrlP panel) > Change mode (folder/buffer/mru)
" * Ctrl+T (inside CtrlP panel) > Open selected in new TAB
" * Ctrl+V / Ctrl+X (inside CtrlP panel) > Open selected in split layout (vertical / horizontal)
" * Ctrl+Y (inside CtrlP panel) > Create a new file (and its parent directories if required)
" * Ctrl+Z (inside CtrlP panel) > Mark/unmark multiple files
" * Ctrl+O (inside CtrlP panel) > Open all marked files (in vertical split layouts)
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/bundle")
    call mkdir($HOME."/.vim/bundle", "", 0770)
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle (extension/plugin manager) setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make vim non-compatible with vi, increasing vim capabilities. This must be 1st!
set nocompatible  " This will set formatoptions to tcq
filetype off      " Required to use vundle
" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here

""" Themes (they all work well in terminal mode)
" Railscasts theme
Plugin 'jpo/vim-railscasts-theme'
" Gruvbox theme
Plugin 'morhetz/gruvbox'
" Wombat256i theme
Plugin 'dsolstad/vim-wombat256i'
" Wombat256mmod theme
Plugin 'michalbachowski/vim-wombat256mod'
" Badolf theme
Plugin 'sjl/badwolf'

""" Folder navigation
" NERDTree (folder explorer)
Bundle 'scrooloose/nerdtree'
" Show git status in NERDTree
Plugin 'Xuyuanp/nerdtree-git-plugin'
" Make tabs/layouts work well with NERDTree (if you need this, you are not using tabs right)
"Plugin 'jistr/vim-nerdtree-tabs'
" Open files by name with fuzzy finder (mf1 will open myfile1). Search in files, buffers and mru
Plugin 'ctrlpvim/ctrlp.vim'

""" Vim start-up
" When opening a file with an incomplete name (vim test.), asks to choose between existing files
Plugin 'EinfachToll/DidYouMean'
" Fancy start screen for vim, which allows fast access to recent files, etc.
Plugin 'mhinz/vim-startify'

""" Bottom fancy status bar
" Airline, great status bar
Plugin 'vim-airline/vim-airline'
" Airline themes
Plugin 'vim-airline/vim-airline-themes'

""" Visual enhancements
" Show (and hide) indentation levels
Plugin 'Yggdroot/indentLine'
" Color parenthesis that go together
Plugin 'junegunn/rainbow_parentheses.vim'
" Show to left of numbers line info about what was modified from git
Plugin 'airblade/vim-gitgutter.git'

""" New functionalities (via new shortcuts)
" Navigate doing searches with 2 chars: s+char+char. Next with ;. Start over with ''
Bundle 'justinmk/vim-sneak'
" Toggle, display and navigate marks with m (jump between interesting parts of the file)
Plugin 'kshenoy/vim-signature'
" Deal with brakets faster (allows to do cs'", or ds{, ysiw], yss), etc.)
Plugin 'tpope/vim-surround'
" Comment / uncomment easily with <leader>c. and <leader>cc
Plugin 'scrooloose/nerdcommenter'

" Add shortcuts for many functions using the '[' and ']' prefixes
Plugin 'tpope/vim-unimpaired'
" Git support
Bundle 'tpope/vim-fugitive'
" vim-bufexplorer
"Bundle 'slack/vim-bufexplorer'  "?
" Markdown for vim
"Bundle 'gabrielelana/vim-markdown'
" Syntax checking
"Plugin 'vim-syntastic/syntastic'  "?
" Complete with TAB
"Plugin 'ervandew/supertab'
" Others: tagline, nerd commenter, snippets, repeat, tabular, speeddating...
" Others: Check AutoComplPop plugins
" Others: https://benmccormick.org/2014/07/21/learning-vim-in-2014-getting-more-from-vim-with-plugins/
" Others: https://www.fullstackpython.com/vim.html
" Check other common themes here: https://github.com/vim-airline/vim-airline/wiki/Screenshots
" Folds for Python
"Plugin 'tmhedberg/SimpylFold'  "!
" Autoindent for Python
"Plugin 'vim-scripts/indentpython.vim'  "?
" Command-T
"Bundle 'wincent/Command-T'  "?
" vim-rails
"Bundle 'tpope/vim-rails'  "?
" ACK for vim
"Bundle 'mileszs/ack.vim'
" Ultimate plugin for python
Plugin 'python-mode/python-mode'
" Trigger completion with TAB
Plugin 'ervandew/supertab'
" Autocomplete (may require extra steps, check https://github.com/Valloric/YouCompleteMe)
"Bundle 'Valloric/YouCompleteMe'
" Search words in whole project, and substitute them easily
"Plugin 'dyng/ctrlsf.vim'

" All of your Plugins must be added before the following line

call vundle#end()  " Load all plugins
" Enable filetype again
filetype on        " Try to recognize filetype
filetype indent on " Load indent file for filetype detected from ~/.vim/indent
filetype plugin on " Load plugin file for filetype detected from ~/.vim/ftplugin

if !isdirectory($HOME."/.vim/bundle/Vundle.vim")
    echo "---------------------------------------------------------------------------------------"
    echo "| Vundle not found, run the following command:                                        |"
    echo "| git clone https://github.com/VundleVim/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim  |"
    echo "---------------------------------------------------------------------------------------"
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Format options, dictates when line breaks are introduced automatically
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set preferred format options
set textwidth=99      " A line jump will be entered after 99 chars (see fo t, c, l)
set formatoptions-=t  " No new line added after textwidth chars in line
set formatoptions+=c  " Insert new line after textwidth when writing comments
set formatoptions+=r  " Insert comment leader when hitting ENTER in insert mode
set formatoptions+=o  " Insert comment leader in new line when using o/O in comment
set formatoptions+=j  " Remove a comment leader when joining lines
set formatoptions+=l  " If line length > textwidth when insert starts don't break it
set formatoptions+=q  " Allow formatting of comments with 'gq'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader definitions and uses
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:mapleader = ","  " Set <leader> to comma
" Writing <lader>vsrc will open vimrc in a new tab
nnoremap <leader>vsrc :tabe $MYVIMRC<cr>
" Writing <lader>src will load vimrc changes
nnoremap <leader>src :source $MYVIMRC<cr>
" Every time vimrc is modified, it is loaded (sourced) again
autocmd! bufwritepost .vimrc source $MYVIMRC

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shortcuts and key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :W sudo saves the file (for handling permission-denied errors)
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Navigarte between split layouts (create them with :sp, :vsp, :vs, :sv)
nnoremap <C-J> <C-W><C-J>  " Move down with Ctrl+J
nnoremap <C-K> <C-W><C-K>  " Move up with Ctrl+K
nnoremap <C-L> <C-W><C-L>  " Move left with Ctrl+L
nnoremap <C-H> <C-W><C-H>  " Move right with Ctrl+H

" Navigate between tabs (create them with :newtab)
nnoremap <C-Left> :tabprevious<CR>  " Move to next tab with Ctrl+Left
nnoremap <C-Right> :tabnext<CR>     " Move to previous tab with Ctrl+Right
nnoremap <silent> <C-Up> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>   " Move tab left with Alt+U
nnoremap <silent> <C-Down> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>  " Move tab right with Alt+R

" F8 shows all buffers in tabs,or puts all tabs in buffers (toggles the behavior)
let notabs = 0
nnoremap <silent> <F8> :let notabs=!notabs<Bar>:if notabs<Bar>:tabo<Bar>:else<Bar>:tab ball<Bar>:tabn<Bar>:endif<CR>
inoremap <silent> <F8> <Esc>:let notabs=!notabs<Bar>:if notabs<Bar>:tabo<Bar>:else<Bar>:tab ball<Bar>:tabn<Bar>:endif<CR>
vnoremap <silent> <F8> <Esc>:let notabs=!notabs<Bar>:if notabs<Bar>:tabo<Bar>:else<Bar>:tab ball<Bar>:tabn<Bar>:endif<CR>

" Add NerdTree shortcut
nnoremap <F10> :NERDTreeToggle<cr>       " Key to open NERDTree in commands mode
inoremap <F10> <Esc>:NERDTreeToggle<cr>  " Key to open NERDTree in insert mode

" Enable/disable paste mode (does not indent every line) with F3
nnoremap <F3> :set paste!<CR>
inoremap <F3> <ESC>:set paste!<CR>a
vnoremap <F3> <ESC>:set paste!<CR>gv

" Show/hide indents
nnoremap <F4> :IndentLinesToggle<CR>
inoremap <F4> <ESC>:IndentLinesToggle<CR>a
vnoremap <F4> <ESC>:IndentLinesToggle<CR>gv

" Remove all trailing spaces
nnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>
inoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>
vnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Map Ctrl+D to save current document
nnoremap <C-D> :update<CR>
inoremap <C-D> <ESC>:update<CR>a
vnoremap <C-D> <ESC>:update<CR>gv

" Map <leader>e and <leader>E to quit current / all windows
nnoremap <Leader>e :q<CR>
nnoremap <Leader>E :qa<CR>

" Map TAB to show last read file. Use this to change fast between buffers
nnoremap <TAB> <C-^>

" Create tab with Ctrl+T (tabs are just a different layout of all the buffers, not their sustite)
nnoremap <C-T> :tabnew<Space>%<CR>

" Ctrl+F searches word under cursor in current document, Ctrl+Shift+F searches in project
nnoremap <C-F> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap gr :grep <cword> *<CR>
nnoremap Gr :grep <cword> %:p:h/*<CR>
nnoremap gR :grep '\b<cword>\b' *<CR>
nnoremap GR :grep '\b<cword>\b' %:p:h/*<CR>

" Using two uppercase letters in insert mode we can navigate faster
" Go to beginning of line
inoremap II <Esc>I
" Go to end of line
inoremap AA <Esc>A
" Create new line under current line
inoremap OO <Esc>o
" Change what is on the right side of the cursor
inoremap CC <Esc><Right>C
" Change the whole line
inoremap SS <Esc>S
" Delete the whole line
inoremap DD <Esc>ddi
" Delete current word TT before idx, FF all word, VV after idx
inoremap TT <Esc><Right>dwi
inoremap FF <Esc><Right>diwi
inoremap VV <Esc><Right>dbi
" Undo
inoremap UU <Esc>ua
" Redo (not replace, because it would do same as XX)
inoremap RR <Esc><C-R>a
" Move line down
inoremap qq <Esc>ddpa
" Move line up
inoremap QQ <Esc>dd2kpa
" Copy current line
inoremap yy <C-O>yy
" Duplicate current line
inoremap YY <Esc>yypa
" Paste
inoremap PP <Esc>pa
" Remove one character
inoremap XX <Esc><Right>xi
" Navigate word by word like in normal mode
inoremap WW <Esc><Right>wi
inoremap EE <Esc><Right>ei
inoremap BB <Esc><Right>bi
" Navigate around without having to go to the arrow keys
inoremap JJ <Esc>ja
inoremap KK <Esc>ka
inoremap HH <Esc>ha
inoremap LL <Esc>la
" Indent
inoremap >> <Esc>>>i
inoremap << <Esc><<i
" Comment line (requires NERD Commenter) and go down to next line
imap // <C-O><leader>c<Space><C-O>j
" Available still: GG, ZZ, NN, MM

" Visual mappings
" Sort lines
vnoremap <Leader>s :sort<CR>
" Easier moving code blocks (after indenting, don't loose visual mode)
vnoremap < <gv
vnoremap > >gv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Select colors
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting: text can be shown in different fonts and colors
if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif
" Show whitespace (must go before colorscheme command)
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+$/
set t_Co=256
" Variable to choose preferred colorscheme
colorscheme default
" Try to use fancier colorscheme, use default if not found
let color_scheme = "gruvbox"  " railscasts, gruvbox, wombat256i, wombat256mod, badwolf
if color_scheme == "gruvbox"
    " Try to use fancier colorscheme, use default if not found
    let g:gruvbox_contrast_dark="hard"
    let g:gruvbox_contrast_light="hard"
    let g:gruvbox_number_column="bg1"
    let g:gruvbox_color_column='bg2'
    silent! colorscheme gruvbox
    " Choose default background color (light/dark)
    set background=dark
elseif color_scheme == "railscasts"
    silent! colorscheme railscasts
elseif color_scheme == "wombat256i"
    silent! colorscheme wombat256i
elseif color_scheme == "wombat256mod"
    silent! colorscheme wombat256mod
elseif color_scheme == "badwolf"
    silent! colorscheme badwolf
endif
" <leader>bg toggles background between light/dark (may mess up colorscheme, works with gruvbox)
nnoremap <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spaces and tabs, visual and misc setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=4      " Number of visual spaces per TAB
set softtabstop=4  " Num spaces tab when editing (if we TAB, we enter N spaces)
set shiftwidth=4   " Num spaces tab when editing (if we TAB, we enter N spaces)
set expandtab      " Tabs are spaces (great for python and bash)
set autoindent     " Copy indent from current line to next when starting new line
set smarttab       " Insert tabstop spaces when the TAB key is pressed
set shiftround     " Round indentation to multiple of shiftwidth when shifting
au BufNewFile,BufRead *.js, *.html, *.css  " Some files will use 2 space tabs
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2

set showmatch      " Highlight matching [{()}]
set showcmd        " Show command being typed in status bar (bottom right)
set cursorline     " Highlight current line
set scrolloff=1    " Set to 9999 to see cursor always in the middle of screen
set sidescrolloff=5  " Number of columns to keep left and right of cursor
set display+=lastline  " Always try to show a paragraph’s last line
set wrap           " Wrap line in multiple lines if it is wider than screen
set linebreak      " Avoid wrapping a line in the middle of a word
set laststatus=2   " Always display status bar
set ruler          " Show cursor position is status bar
set colorcolumn=100  " Show column where we go over 100 spaces

set backspace=indent,eol,start  " Backspace removes indents and line jumps
set lazyredraw     " Vim redraws screen too often, redraw only when we need to
set autowrite      " Automatically save before commands like :next and :make
set hidden         " Hide buffers when they are abandoned
set mouse=a        " Enable mouse usage (all modes). Mouse will move cursor, etc.
set novisualbell   " Disable beep on error
set noerrorbells   " Disable flash on error
set nrformats-=octal  " Interpret octal as decimal when incrementing numbers
set autoread       " Relod files if not modified inside Vim
set nomodeline     " Ignore file’s mode lines, use vimrc config instead
set ttimeout       " Wait to see if more chars come after cmd, if not run it
set ttimeoutlen=200  " How may ms to wait before moving on
set tabpagemax=50  " At most 50 tabs can be opened
set wildignore=*.swp,*.bak,*.pyc,*.class  " Ignore these files

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Best search setup
set ignorecase     " Do case insensitive matching
set smartcase      " Case insensitive match if no uppercase, else case sensitive
set incsearch      " Incremental search, show the next matching while typing
set wrapscan       " When we get to end search, go back to beginning
set hlsearch       " Highlight all results in file when searching
nohlsearch         " Hide last search highlight when we open vim or reload vimrc
" Use ,, to clear the highlighting of :set hlsearch
nnoremap <Leader><Leader> :noh<CR>
inoremap <Leader><Leader> <Esc>:noh<CR>a
vnoremap <Leader><Leader> <Esc>:noh<CR>gv
" Use \\ to search current word in current document (like * but stay in same postition)
nnoremap \\ :keepjumps normal! mi*`i<CR>
inoremap \\ <Esc>:keepjumps normal! mi*`i<CR>a
vnoremap \\ <Esc>:keepjumps normal! mi*`i<CR>gv
" F12 toggle highlight on and off
nnoremap <F12> :set hls!<CR>
inoremap <F12> <ESC>:set hls!<CR>a
vnoremap <F12> <ESC>:set hls!<CR>gv
" Use <leader>m to toggle mouse use (right-click paste only works if mouse disabled)
function! ToggleMouse()
    if &mouse == 'a'
        echo "mouse off"
        set mouse=
    else
        echo "mouse on"
        set mouse=a
    endif
endfunc
nnoremap <Leader>m :call ToggleMouse()<CR>
vnoremap <Leader>m <ESC>:call ToggleMouse()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Grep configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
    " bind \ (backward slash) to grep shortcut
    command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>

elseif executable('ack')
    set grepprg=ack\ -s\ -H\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding (hiding or showing content)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Select fold mode
set foldmethod=indent  " Folds are created manually
set foldnestmax=3      " Only fold up to three nested levels
set foldenable         " Disable folding by default
set foldlevel=99       " Disable folds initially

" Open fold with space, and create fold with space after visually selecting
"nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<cr>
"vnoremap <Space> zf
"nnoremap <Space> za

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocomplete magic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Select complete options
set wildmenu       " Visual autocomplete for command menu
set wildmode=longest,full  " Autocomplete in status bar
set complete-=i    " When completing (Ctrl+P, Ctrl+N), ignore included files
set completeopt=longest,menuone  " Complete longest word, show menu if one option
" Enable omni completion
if has("autocmd") && exists("+omnifunc")
    autocmd Filetype * if &omnifunc == "" | setlocal omnifunc=syntaxcomplete#Complete | endif
endif
" When the menu appears, the 1st completion option gets highlighted automatically
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
inoremap <expr> <C-p> pumvisible() ? '<C-p>' : '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<cr>'
" Only useful if we use Omni
inoremap <expr> <M-,> pumvisible() ? '<C-n>' : '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
" YouCompleteMe Plugin config
" Ensures autocomplete window goes away when you’re done with it
let g:ycm_autoclose_preview_window_after_completion=1
" Map Ctrl+D to go to definition of function
nnoremap <leader>d :YcmCompleter GoToDefinitionElseDeclaration<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Change between wrap and nowrap mode with <leader>w
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map up and down to navigate visually (following visual line breaks)
nnoremap <silent> <Leader>w :call ToggleWrap()<cr>
function! ToggleWrap()
    if &wrap
        echo "wrap off"
        setlocal nowrap
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "wrap on"
        setlocal wrap linebreak nolist
        setlocal display+=lastline
        nnoremap <buffer> <silent> <Up>   gk
        nnoremap <buffer> <silent> <Down> gj
        nnoremap <buffer> <silent> <Home> g<Home>
        nnoremap <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" Make sure key mappings are available when we start vim
set wrap!
silent call ToggleWrap()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Permanent undo and file management
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Create folders if necessary
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
if !isdirectory($HOME."/.vim/swap-file")
    call mkdir($HOME."/.vim/swap-file", "", 0700)
endif
" Move viminfo into ~/.vim folder
set viminfo+=n~/.vim/viminfo
" Save undo info to allow undo even after reopening file
set undodir=$HOME/.vim/undo-dir " Directory undo files
set undofile                    " Create undo file
set history=1000                " Increase the undo limit
" Disable backup file
set backupdir=$HOME/.vim        " Directory to store backup files
set nobackup                    " Disable backups
" Move swap files into ~/.vim/swap-file
set dir=$HOME/.vim/swap-file    " Directory to store swap files
set swapfile                    " Enable swap files

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cursor position remembered
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Jump to last position when reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shared clipboard
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Share vim clipboard and OS clipboard
set clipboard=unnamed
if has('clipboard') == 0
    echo "Vim is not compiled with the +clipboard feature."
    echo "You should install a different version to be able to paste your clipboard."
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart line numbers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" See relative numbers when starting vim
set relativenumber
set number
" Functions to toggle absolute or relative numbers
function! ToggleNumbersOn()
    set relativenumber!
    set number
endfunction
function! ToggleRelativeOn()
    set number
    set relativenumber
endfunction
" See absolute line numbers when console loses focus, switch to relative when back
autocmd FocusLost * call ToggleNumbersOn()
autocmd FocusGained * call ToggleRelativeOn()
" See absolute line numbers on i, see relative line numbers on ESC
autocmd InsertEnter * call ToggleNumbersOn()
autocmd InsertLeave * call ToggleRelativeOn()
" Allow toggling between relative and absolute line numbers with command Ctrl + n
function! NumberToggle()
    if(&relativenumber == 1)
        call ToggleNumbersOn()
    else
        call ToggleRelativeOn()
    endif
endfunction
nnoremap <C-n> :call NumberToggle()<cr>
function! ToggleNumbersColumn()
    if(&number == 1)
        set norelativenumber
        set nonumber
        call gitgutter#disable()
        if b:sig_enabled
            call signature#utils#Toggle()
        endif
    else
        call ToggleRelativeOn()
        call gitgutter#enable()
        if !b:sig_enabled
            call signature#utils#Toggle()
        endif
    endif
endfunction
nnoremap <Leader>n :call ToggleNumbersColumn()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
set noshowmode  " Don't print --INSERT-- in insert mode, info already in status
" Make sure powerline arrows appear (requires installing fonts)
" Follow this: https://powerline.readthedocs.io/en/latest/installation/linux.html
" The font will not work unless you add the powerline.conf file into ~/.config/fontconfig/conf.d
let g:airline_powerline_fonts = 1  " Comment this to use default font (no special characters)
if get(g:, 'airline_powerline_fonts', 0) == 1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    "let g:airline_left_sep = '»'
    "let g:airline_left_sep = '▶'
    "let g:airline_right_sep = '«'
    "let g:airline_right_sep = '◀'
    "let g:airline_symbols.linenr = '␊'
    "let g:airline_symbols.linenr = '␤'
    "let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    "let g:airline_symbols.paste = 'ρ'
    "let g:airline_symbols.paste = 'Þ'
    let g:airline_symbols.paste = '∥'
    let g:airline_symbols.whitespace = 'Ξ'
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    "let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    "let g:airline_symbols.linenr = ''
endif
let g:airline_theme='badwolf'  " Select airline theme

" Rainbow parentheses
let g:rainbow#blacklist = [248, 241, 243, 223, 229]  " Blacklist color with low contrast (gruvbox)
au VimEnter * RainbowParentheses            " Toggle rainbow parentheses on
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" IndentLine
let g:indentLine_enabled = 0  " Indentation guidelines hidden by default

" GitGutter
set updatetime=1000  " Updates happen every 1s (default was 4s)

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']  "ignore files in NERDTree
" Close vim if only window open left is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"Python-Mode
if has('python3') == 0
    echo "Vim is not compiled with the +python3 feature."
    echo "You should install a different version to use python3 mode."
else
    let g:pymode_python = 'python3'  " Make python work with python3
endif
" Make PEP8 allow up to 100 chars
let g:pymode_options_max_line_length=100
autocmd FileType python set colorcolumn=100
" Choose syntax correction config
let g:pymode_lint_config = '$HOME/.vim/pylint.rc'
let g:pymode_lint_unmodified = 1  " Every time we save, check code
" Disable rope (for now)
let g:pymode_rope=0
