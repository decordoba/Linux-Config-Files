# Screen basic commands
# leader (default is ctrl-c): gets you in screen mode
# leader ?: see available commands
# leader c: create new window
# leader n: go to next window
# leader p: go to previous window
# leader SPACE: go to next window
# leader BACKSPACE: go to previous window
# leader NUMBER: got to Nth window
# leader ": switch between windows using list
# leader d: detach from screen
# leader H: create a running log session (LOG EVERYTHING)
# leader M: flash alert (even if in another window) when new output in screen
# leader _: flash alert (even if in another window) when screen goes to silence (no output)
# leader A: change title window (the name seen in the status bar)
# leader S: split window horizontally (create new region)
# leader |: split window vertically (create new region)
# * after splitting, you need to go to new region and start session with leader c
# leader Q: unsplit everything in current window, go back to only one region
# leader TAB: switch from one splitted region to the other
# leader ESC: enter scrollback/copy mode
# leader ctrl-a: toggle between current and previous region
# leader a: send ctrl-a to current window
# leader X: close current region
# leader K: kill window
# leader P: open Python shell
# leader R: open su shell

# No welcome message
startup_message off

# Huge scrollback buffer
defscrollback 10000

# Allow scrolling with mouse (it is a bit buggy if hardstatus enabled and it changes too often)
termcapinfo xterm* ti@:te@

# Bind Shift+PgUp/PgDn to scroll
bindkey -m "^[[5;2~" stuff ^b
bindkey -m "^[[6;2~" stuff ^f

# Show any one line information next to your hostname in the status bar
# backtick 1 5 5 $HOME/bin/my_script.sh

# The following two lines give a two-line status, with the current window highlighted
hardstatus alwayslastline
# hardstatus string '%{= kg}[ %{G}%H%? %1`%? %{g}][%= %{W}%-w%{+b Yk} %n %t%?(%u)%? %{-}%+w %=%{g}][ %{B}%c %{g}]'
# %{= kg} clears all attributes, and paints green on black background
# [ %{G}%H%? writes the hostname in bright green
# %1`%? %{g}] shows a %1 argument if it exists
# [%= adds padding so that the status fills the line
# %{W}%-w% shows window numbers and names up to the current window in white
# {+b Yk} %n*%t shows the current window and number in yellow background
# %?(%u)%? prints all other users in the window (still in yellow background)
# %{-}%+w shows window numebrs and names after the current window in white
# %=%{g}] adds padding to fill line
# [ %{B}%c %{g}] shows the time in blue
hardstatus string '%{= g}[ %{G}%H%? %1`%? %{g}][%= %{r}%-w%{+b R} %n %t%?(%u)%? %{-}%+w %=%{g}][ %{y}Load: %l %{g}][ %{B}%Y-%m-%d %{W}%c %{g}]'

# Instead of using ctrl-a as leader, use ctrl-k
# escape ^Kk

# Full screen programs like vim are not there when we scroll
altscreen on

# Mouse tracking allows to switch region focus by clicking
mousetrack on

# Autodetach session on hangup instead of terminating screen completely
autodetach on

# Start window numbering from 1, leader 0 loads screen 11
select 1
bind c screen 1 # window numbering starts at 1 not 0
bind 0 select 10

# Time a message is displayed if screen is not disturbed by
# other activity. The dafault is 5 seconds
msgwait 15

# Set default new window title instead of bash
shelltitle "Shell"

# leader R creates a su window and calls it Root
bind R screen -t Root sudo bash

# leader P creates an iPython window and calls it iPython
bind P screen -t iPython ipython3

# Split can be done with leader s, the shortcut overwritten (xoff) is useless anyway
bind s split

# Navigating regions with Ctrl-arrows
bindkey "^[[1;5D" focus left
bindkey "^[[1;5C" focus right
bindkey "^[[1;5A" focus up
bindkey "^[[1;5B" focus down

# Switch windows with F3 (prev) and F4 (next)
bindkey "^[OR" prev
bindkey "^[OS" next

# Switch layouts with Ctrl+F3 (prev layout) and Ctrl+F4 (next)
bindkey "^[O1;5R" layout prev
bindkey "^[O1;5S" layout next

# F2 puts Screen into resize mode. Regions are resized using hjkl keys
bindkey "^[OQ" eval "command -c rsz" # enter resize mode

# Use hjkl keys to resize regions
bind -c rsz h eval "resize -h -1" "command -c rsz"
bind -c rsz j eval "resize -v -1" "command -c rsz"
bind -c rsz k eval "resize -v +1" "command -c rsz"
bind -c rsz l eval "resize -h +1" "command -c rsz"

# Quickly switch between regions when resizing using TAB and ARROWS
bind -c rsz \t    eval "focus"       "command -c rsz" # Tab
bind -c rsz -k kl eval "focus left"  "command -c rsz" # Left
bind -c rsz -k kr eval "focus right" "command -c rsz" # Right
bind -c rsz -k ku eval "focus up"    "command -c rsz" # Up
bind -c rsz -k kd eval "focus down" "command -c rsz" # Down

# Make all regions same height and width with = when in resize mode
bind -c rsz = eval "resize =" "command -c rsz"

# Resize the current region with leader =,+,-. The space will be removed from or
# added to the region below or if there's not enough space from the region above.
bind = resize =
bind + resize +1
bind - resize -1

# # Start everytime with 4 regions in one window
# screen -t Shell-A  1 bash
# screen -t Shell-B  2 bash
# screen -t Python  3 ipython3
# screen -t Media 4 bash
# layout autosave on
# layout new one
# select 1
# layout new two
# select 1
# split
# resize -v +8
# focus down
# select 4
# focus up
# layout new three
# select 1
# split
# resize -v +7
# focus down
# select 3
# split -v
# resize -h +10
# focus right
# select 4
# focus up

