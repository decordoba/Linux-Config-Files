################################################################
# SCREEN BASIC COMMANDS (WHEN USING THIS .screenrc)
################################################################

# leader (default is ctrl-c): gets you in screen mode
# leader ?: see available commands
# leader :: enter screen command line
# leader c: create new window
# leader n: go to next window
# leader p: go to previous window
# leader SPACE: go to next window
# leader BACKSPACE: go to previous window
# leader NUMBER: got to Nth window
# leader ": switch between windows using list
# leader ': show prompt to switch window by number
# leader d: detach from screen (leave screen, jobs will continue running)
# leader z: suspend from screen (leave screen pausing jobs)
# leader h: write a hardcopy of the current window to the file 'hardcopy.n'
# leader H: create a running log session or the current window to 'screenlog.n'
# leader M: flash alert (even if in another window) when new output in screen
# leader _: flash alert (even if in another window) when screen goes to silence (no output)
# leader m: repeat the last message displayed in the message line
# leader A: change window title (the name seen in the status bar)
# leader s: split window horizontally (create new region)
# leader |: split window vertically (create new region)
# * after splitting, you need to go to new region and start session with leader c
# leader Q: unsplit everything in current window, go back to only one region
# leader TAB: switch from one splitted region to the other
# leader ESC: enter scrollback/copy mode
# leader ctrl-a: toggle between current and previous region
# leader a: send ctrl-a to current window
# leader X: close current region
# leader K: kill window
# leader \: quit (kill all windows)
# leader P: open Python shell
# leader R: open su shell
# leader C: clear screen
# leader l: fully refresh the current window
# leader x: lock terminal (require password to use it)
# leader <: readbuffer, reads the content of ~/.screen/exchange and puts them into paste buffer
# leader >: writebuffer, writes the paste buffer to ~/.screen/exchange
# leader =: forgets (unlinks) the screen exchange file used, goes back to using ~/.screen/exchange

# F1,F2,F3...: explained below (TODO, show explanation here)

# * in resize mode, move like in VIM:
# SPACE/ENTER: start and stop copying. Add a before the last space to append instead of exit copy mode
# h,j,k,l: move the cursor line by line or column by column
# 0,^,$: move to the leftmost column, to the 1st, or to the last non-whitespace char in the line
# H,M,L: move the cursor to the leftmost column of the top, center or bottom line of the window
# +,-: move the cursor to the leftmost column of the next or previous line
# G: move to the specified absolute line (default: end of buffer)
# |: move to the specified absolute column
# w,b,e: move the cursor word by word
# B,E: move the cursor WORD by WORD (as in vi, cursor goes to spaces between words)
# C-u,C-d: scroll display up/down by specified amount of lines while preserving cursor position (default: half screen)
# C-b,C-f: move the cursor up/down a full screen
# g: move to the beginning of the buffer
# %: jump to the specified percentage of the buffer
# /,?: vi-like search forward/backward
# C-s,C-r: emacs style incremental search forward/backward

################################################################
# STATUS LINE (EXPLAINED!)
################################################################

# Create status line always in the last line
hardstatus alwayslastline
# hardstatus string '%{= kg}[ %{G}%H%? %1`%? %{g}][%= %{W}%-w%{+b Yk} %n %t%?(%u)%? %{-}%+w %=%{g}][ %{B}%c %{g}]'
# %{= kg} clears all attributes, and paints green on black background
# [ %{G}%H%? writes the hostname in bright green
# %1`%? %{g}] shows a %1 argument if it exists
# [%= adds padding so that the status fills the line
# %{W}%-w% shows window numbers and names up to the current window in white
# {+b Yk} %n %t shows the current window and number in yellow background
# %?(%u)%? prints all other users in the window (still in yellow background)
# %{-}%+w shows window numbers and names after the current window in white
# %=%{g}] adds padding to fill line
# [ %{B}%c %{g}] shows the time in blue
hardstatus string '%{= g}[%{G} %H%? %1`%? %{g}][%{r}%= %-w%{+b R} %n %t%?(%u)%? %{-}%+w %=%{g}][%{y} Load: %l %{g}][%{B} %Y-%m-%d %{W}%c %{g}]'
# %{= g} clears all attributes, and paints dark green the following text (here [)
# [ %{G}%H%? writes the hostname in bright green
# %1`%? %{g}] shows a %1 argument if it exists
# [%= adds padding so that the status fills the line
# %{r}%-w% shows window numbers and names up to the current window in dark red
# {+b R} %n %t shows the current window and number in bold bright red
# %?(%u)%? prints all other users in the window (still in bold bright red)
# %{-}%+w shows window numbers and names after the current window in white
# %=%{g}] adds padding to fill line
# [ %{y}Load: %l %{g}] shows the load in yellow
# [ %{B}%c %{g}] shows the time in blue

# Show any one line information next to your hostname in the status bar
# backtick 1 5 5 $HOME/bin/my_script.sh

################################################################
# SCREEN CONFIGURATION
################################################################

# Instead of using ctrl-a as leader, use ctrl-k
# escape ^Kk

# No welcome message
startup_message off

# Huge scrollback buffer (too big and you might have memory issues for many screens)
defscrollback 10000

# Allow scrolling with mouse
# It can be bit buggy if hardstatus enabled or screen in split in regions
# In those cases use leader ESC or leader [
termcapinfo xterm*|rxvt* ti@:te@

# Make screen messages stand out: black on bright green
sorendition "+b kG"

# Turn visual bell on
vbell on
vbell_msg "  !! Something interesting happened !!  "
bell "%c bell -> %n%f %t^G"

# Set message shown when monitoring (leader M, leader _)
activity "[%c:%s] activity in %n (%t)"

# Full screen programs like vim are not there when we scroll
altscreen on

# Mouse tracking allows to switch region focus by clicking
mousetrack on

# Autodetach session on hangup instead of terminating screen completely. Never, ever turn this off!
autodetach on

# Time a message is displayed if screen is not disturbed by other activity (default=5s)
msgwait 10

# Set default new window title instead of bash
shelltitle "Shell"

# Start window numbering from 1, leader 0 loads screen 10
select 1
screen -t "Shell" 1 bash
bind c screen 1 # window numbering starts at 1 not 0
bind 0 select 10

################################################################
# LOGGING (leader H) AND HARDCOPY (leader h) CONFIGURARION
################################################################

# Make sure folders .screen/hardcopy and .screen/log exist
exec bash -c "mkdir -p $HOME/.screen $HOME/.screen/hardcopy $HOME/.screen/log"

# Change directory where hardcopies are saved
# Hardcopies are saved with leader h
hardcopydir "$HOME/.screen/hardcopy"

# # Append instead of overwriting hardcopy files
# hardcopy_append on

# Save log files as screenlog.date.time.shell_number
# Log files are created with leader H
logfile "$HOME/.screen/log/screenlog.%Y%m%d.%c.%n"

# Add timestamp to logging every 10min of inactivity
logtstamp on
logtstamp after 600
logtstamp string "-- %n:%t -- 600 s inactivity -- %Y/%m/%d %02c:%s --\n"

################################################################
# BUFFER CONFIGURARION
################################################################

# Change the filename used for reading and writing with the paste buffer
bufferfile '$HOME/.screen/exchange'

################################################################
# LEADER (CTRL-C) KEYBINDINGS
################################################################

# leader R creates a su window and calls it Root
bind R screen -t Root 1 sudo bash

# leader P creates an iPython window and calls it iPython
bind P screen -t iPython 1 ipython3

# leader T creates a top window
bind T screen -t Top 1 top

# leader W watches used GPUs (leader W is quite useless anyway)
bind G screen -t GPUs 1 watch nvidia-smi

# Split can be done with leader s, the shortcut overwritten (xoff) is useless anyway
bind s split

# Show or hide the status bar with leader I/O (logoff and logon can be done with leader L anyway)
bind I hardstatus ignore
bind O hardstatus alwayslastline

################################################################
# GENERAL KEYBINDINGS
################################################################

# Bind Shift+PgUp/PgDn to scroll
bindkey -m "^[[5;2~" stuff ^b
bindkey -m "^[[6;2~" stuff ^f

# Tip: find out the symbols used in your terminal for every command with cat > /dev/null
# Navigating regions with Ctrl-arrows [gnome-terminal]
bindkey "^[[1;5D" focus left
bindkey "^[[1;5C" focus right
bindkey "^[[1;5A" focus up
bindkey "^[[1;5B" focus down
# Navigating regions with Ctrl-arrows [putty]
bindkey "^[[D" focus left
bindkey "^[[C" focus right
bindkey "^[[A" focus up
bindkey "^[[B" focus down

# Switch windows with Ctrl-Alt-Left/Right [gnome-terminal]
bindkey "^[[1;7C" prev
bindkey "^[[1;7D" next
# Switch windows with Ctrl-Alt-Left/Right [putty]
bindkey "^[^[[D" prev
bindkey "^[^[[C" next

################################################################
# FUNCTION (F1, F2, F3...) KEYBINDINGS
################################################################

# F1 writes paste buffer to file [gnome-terminal]
bindkey "^[OP" writebuf
# F1 writes paste buffer to file [putty]
bindkey "^[[11~" writebuf

# F2 creates new tab [gnome-terminal]
bindkey "^[OQ" screen 1
# F2 creates new tab [putty]
bindkey "^[[12~" screen 1

# F3, F4
# Switch windows with F3 (prev) and F4 (next) [gnome-terminal]
bindkey "^[OR" prev
bindkey "^[OS" next
# Switch windows with F3 (prev) and F4 (next) [putty]
bindkey "^[[13~" prev
bindkey "^[[14~" next

# F5 puts screen into resize mode. Regions are resized using hjkl keys [gnome-terminal]
bindkey "^[OT" eval "command -c rsz" # enter resize mode
# F5 puts screen into resize mode. Regions are resized using hjkl keys [putty]
bindkey "^[[15~" eval "command -c rsz" # enter resize mode

# F6, F7
# Split horizontally (F6) and vertically (F7) [gnome-terminal]
bindkey "^[OU" split
bindkey "^[OV" split -v
# Split horizontally (F6) and vertically (F7) [putty]
bindkey "^[[17~" split
bindkey "^[[18~" split -v

# F8, F9
# Remove single split (F8) and remove all splits (F9) [gnome-terminal]
bindkey "^[OW" remove
bindkey "^[OX" only
# Remove single split (F8) and remove all splits (F9) [putty]
bindkey "^[[19~" remove
bindkey "^[[20~" only

# F10 kills current window [gnome-terminal]
bindkey "^[OY" kill
# F10 kills current window [putty]
bindkey "^[[21~" kill

# # Switch layouts with Ctrl+F3 (prev layout) and Ctrl+F4 (next) [gnome-terminal]
# bindkey "^[O1;5R" layout prev
# bindkey "^[O1;5S" layout next

################################################################
# RESIZE MODE KEYBINDINGS
################################################################

# Use hjkl keys to resize regions
bind -c rsz h eval "resize -h -1" "command -c rsz"
bind -c rsz j eval "resize -v -1" "command -c rsz"
bind -c rsz k eval "resize -v +1" "command -c rsz"
bind -c rsz l eval "resize -h +1" "command -c rsz"

# Quickly switch between regions when resizing using TAB and ARROWS
bind -c rsz \t    eval "focus"       "command -c rsz" # Tab
bind -c rsz -k kl eval "focus left"  "command -c rsz" # Left
bind -c rsz -k kr eval "focus right" "command -c rsz" # Right
bind -c rsz -k ku eval "focus up"    "command -c rsz" # Up
bind -c rsz -k kd eval "focus down" "command -c rsz" # Down

# Make all regions same height and width with = when in resize mode
bind -c rsz = eval "resize =" "command -c rsz"

# Resize the current region with leader =,+,-,/. The space will be removed from or
# added to the region below or if there's not enough space from the region above.
bind = resize =
bind + resize +1
bind - resize -1
bind / resize max

################################################################
# LAYOUT CONFIGURATION: SHELLS AND REGIONS SHOWN ON START
################################################################

# # Start everytime with 4 regions in one window and several shells
# screen -t Shell-A  1 bash
# screen -t Shell-B  2 bash
# screen -t Python  3 ipython3
# screen -t Media 4 bash
# layout autosave on
# layout new one
# select 1
# layout new two
# select 1
# split
# resize -v +8
# focus down
# select 4
# focus up
# layout new three
# select 1
# split
# resize -v +7
# focus down
# select 3
# split -v
# resize -h +10
# focus right
# select 4
# focus up

################################################################
# THINGS I HAVE TO TEST
################################################################

# # always use a login shell
# shell -$SHELL
# 
# # shows your sessions in utmp
# deflogin on
# 
# # The vt100 description does not mention "dl". *sigh*
# termcapinfo vt100 dl=5\E[M
# 
# # Set the hardstatus prop on gui terms to set the titlebar/icon title
# termcapinfo xterm*|rxvt*|kterm*|Eterm* hs:ts=\E]0;:fs=\007:ds=\E]0;\007
# 
# # An alternative hardstatus to display a bar at the bottom listing the
# # windownames and highlighting the current windowname in blue. (This is only
# # enabled if there is no hardstatus setting for your terminal)
# hardstatus alwayslastline '%{= kG}[ %{G}%H %{g}][%= %{=kw}%?%-Lw%?%{r}(%{W}%n*%f %t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{G}%l %{W}%c %{g}]'
# 
# # set these terminals up to be 'optimal' instead of vt100
# termcapinfo xterm*|linux*|rxvt*|Eterm* OP
# 
# # Change the xterm initialization string from is2=\E[!p\E[?3;4l\E[4l\E>
# # (This fixes the "Aborted because of window size change" konsole symptoms found
# #  in bug #134198)
# termcapinfo xterm 'is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l'
# 
# # To get screen to add lines to xterm's scrollback buffer, uncomment the
# # following termcapinfo line which tells xterm to use the normal screen buffer
# # (which has scrollback), not the alternate screen buffer.
# #
# #termcapinfo xterm|xterms|xs|rxvt ti@:te@
# 
# # Enable non-blocking mode to better cope with flaky ssh connections.
# defnonblock on 
# 
# # http://robotsrule.us/vim/
# attrcolor b ".I"
# termcapinfo xterm 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
# defbce "on"
# 
# bind i screen -t    'iostat'   7  iostat -dkt 5
# bind v screen -t    'vmstat'   8  vmstat 5
# bind t screen -t    'top'      9  top
# bind r screen -t    'rmsm'     10 /tmp/rmsm.sh
# 
# # Yet another hack:
# # Prepend/append register [/] to the paste if ^a^] is pressed.
# # This lets me have autoindent mode in vi.
# register [ "\033:se noai\015a"
# register ] "\033:se ai\015a"
# bind ^] paste [.]
# 
# # http://www.jukie.net/~bart/blog/screen-ssh-agent
# unsetenv SSH_AUTH_SOCK
# setenv SSH_AUTH_SOCK "$HOME/.screen/ssh-auth-sock.$HOSTNAME"
# 
# #xterm understands both im/ic and doesn't have a status line.
# #Note: Do not specify im and ic in the real termcap/info file as
# #some programs (e.g. vi) will not work anymore.
# termcap  xterm hs@:cs=\E[%i%d;%dr:im=\E[4h:ei=\E[4l
# terminfo xterm hs@:cs=\E[%i%p1%d;%p2%dr:im=\E[4h:ei=\E[4l
# #80/132 column switching must be enabled for ^AW to work
# #change init sequence to not switch width
# termcapinfo  xterm Z0=\E[?3h:Z1=\E[?3l:is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l
# # Make the output buffer large for (fast) xterms.
# termcapinfo xterm* OL=10000
# # tell screen that xterm can switch to dark background and has function
# # keys.
# termcapinfo xterm 'VR=\E[?5h:VN=\E[?5l'
# termcapinfo xterm 'k1=\E[11~:k2=\E[12~:k3=\E[13~:k4=\E[14~'
# termcapinfo xterm 'kh=\E[1~:kI=\E[2~:kD=\E[3~:kH=\E[4~:kP=\E[H:kN=\E[6~'
# # special xterm hardstatus: use the window title.
# termcapinfo xterm 'hs:ts=\E]2;:fs=\007:ds=\E]2;screen\007'
# termcapinfo xterm 'hs:ts=\E]2;:fs=\007:ds=\E]1;screen\007'
# #terminfo xterm 'vb=\E[?5h$<200/>\E[?5l'
# termcapinfo xterm 'vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l'
# # emulate part of the 'K' charset
# termcapinfo   xterm 'XC=K%,%\E(B,[\304,\\\\\326,]\334,{\344,|\366,}\374,~\337'
# # xterm-52 tweaks:
# # - uses background color for delete operations
# termcapinfo xterm ut
# # pgup pgdn for xterm
# termcapinfo xterm*|rxvt* 'ti@:te@'
# 
# #wyse-75-42 must have flow control (xo = "terminal uses xon/xoff")
# #essential to have it here, as this is a slow terminal.
# termcapinfo wy75-42 xo:hs@
# # New termcap sequences for cursor application mode.
# termcapinfo wy* CS=\E[?1h:CE=\E[?1l:vi=\E[?25l:ve=\E[?25h:VR=\E[?5h:VN=\E[?5l:cb=\E[1K:CD=\E[1J
# 
# #make hp700 termcap/info better
# termcapinfo  hp700 'Z0=\E[?3h:Z1=\E[?3l:hs:ts=\E[62"p\E[0$~\E[2$~\E[1$}:fs=\E[0}\E[61"p:ds=\E[62"p\E[1$~\E[61"p:ic@'
# # Extend the vt100 desciption by some sequences.
# termcap  vt100* ms:AL=\E[%dL:DL=\E[%dM:UP=\E[%dA:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC
# terminfo vt100* ms:AL=\E[%p1%dL:DL=\E[%p1%dM:UP=\E[%p1%dA:DO=\E[%p1%dB:LE=\E[%p1%dD:RI=\E[%p1%dC
# 
# multiuser on
# acladd shopqi
# 
# # Supress trailing blank lines when scrolling up in the history buffer
# compacthist on
# 
# bind u windowlist -b
# bind K kill
# 
# # Clear scrollback buffer
# bind F eval 'scrollback 0' 'scrollback 10000' 'echo "Scrollback buffer cleared"'
# 
# # don't remove windows from the window list as soon as window process exits.
# zombie kr #  k: destory window, r: resurrect window
# 
# # echo command name whenever a window is created or resurrected.
# verbose on
# 
# # changes the kind of messages to the nethack-style.
# nethack on
# 
# # disables vbell toggle binding to use ^G as cancel
# bind ^G
# 
# # window re-numbering
# # override default `N'(number) mapping
# bind N colon 'number '
#
# # shortcut of screen sub-command with title option.
# bind s colon 'screen -t '
# 
# # switch window encoding
# bind ^U eval 'encoding utf8'  'info'
# bind ^E eval 'encoding eucjp' 'info'
# 
# # switch focus to other region(like vi)
# # orverride default `k'(kill), `t'(time), `b'(break) mappings.
# bind j focus down
# bind k focus up
# bind t focus top
# bind b focus bottom
# 
# More here! (this is a great source: https://gist.github.com/libitte/5449336)
# 
# # Let's remove some dangerous key bindings ...
# bind k
# bind ^k
# bind .
# bind ^\
# bind \\
# bind ^h
# bind h
# 
# # ... and make them better.
# bind 'K' kill
# bind 'I' login on
# bind 'O' login off
# bind '}' history
# 
# # Yet another hack:
# # Prepend/append register [/] to the paste if ^a^] is pressed.
# # This lets me have autoindent mode in vi.
# register [ "\033:se noai\015a"
# register ] "\033:se ai\015a"
# bind ^] paste [.]