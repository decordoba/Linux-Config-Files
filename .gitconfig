[user]
        name = decordoba
        email = danieldecordobagil@hotmail.com

[alias]
        # basic abreviations: co, ci, st, br
        co = checkout
        ci = commit
        st = status
        br = branch
        # 'git commit -m' that does not require double quotes (""). i.e.: git cim My awesome comit.
        cim = "!f() { local tmp=\"$*\"; git commit -m \"$tmp\"; }; f"
        # show git log but nicer and in one line, run with -p to see changes in every commit
        hist = log --pretty=format:'%C(yellow bold)%h%Creset %C(yellow)%ad%Creset %C(red)|%Creset %s%C(green bold)%d%Creset %C(cyan)[%an]%Creset' --graph --date=short
        # show git log in a really colorfull way, perfect to run with -p to see changes in every commit
        lg = log --graph --pretty=format:'%C(magenta bold)%H%Creset %C(green bold)(%cr)%Creset%C(yellow bold)%d%Creset %C(cyan bold)%s%Creset %C(blue bold)[%an]%Creset' --abbrev-commit
        # get info from a hash
        type = cat-file -t # expects hash (number in git hist)
        dump = cat-file -p # expects hash (number in git hist)
        # log + blame. Show whole file history commit by commit with author
        lame = log -p -M --follow --stat -- # expects filename
        # show files in repo and count number of lines
        lines = ls-files | xargs wc -l'

        # TODO: check this to do autocomplete: https://coderwall.com/p/d2w7oa/auto-completion-within-complex-git-alias

        # TODO: check this awesome source: https://gist.github.com/robmiller/6018582

        # TODO: find a way to make commits incorporate icons easily. Probably using this: https://stackoverflow.com/questions/7005513/pass-an-argument-to-a-git-alias-command
        # :art:               when improving the format/structure of the code
        # :newspaper:         when creating a new file
        # :rocket:            when improving performance
        # :books:             when writing docs
		# :pencil2:	          when performing minor changes/fixing the code or language
        # :bug:               when fixing a bug
        # :tada: 	          initial commit
        # :bookmark: 	      version tags / releasing
        # :sparkles:          when adding a feature
        # :fire:              when removing features/code
        # :construction:      work in progress
        # :wrench:            when changing configuration files
        # :handshake:      	  when merge files
        # :speaker:           when adding logging
        # :mute:              when reducing logging
        # :white_check_mark:  when adding tests
        # :lock:              when dealing with security
        # :arrow_up:          when upgrading dependencies
        # :arrow_down:        when downgrading dependencies
        # :heavy_plus_sign:   when adding dependencies
        # :heavy_minus_sign:  when removind dependencies

        # create a new branch off of a local branch and check it out locally, defaults to master
        rcreate = "!git push origin ${2:-master}:refs/heads/$1;git fetch origin;git branch --track $1 origin/$1;git checkout $1"

        # rename a branch ($1) to something else ($2)
        rmove = "!git push origin $1:refs/heads/$2;git fetch origin;git branch --track $2 origin/$2;git checkout $2;git branch -d $1;git push origin :refs/heads/$1"

        # push a local branch to the remote called origin and check it out locally
        rpush = "!git push origin $1:refs/heads/$1;git fetch origin;git config branch.$1.remote origin;git config branch.$1.merge refs/heads/$1;git checkout $1"

        # remove a branch
        rrm = "!git push origin :refs/heads/$1;git branch -d $1"

        # track a remote branch locally and check it out locally
        rtrack = "!git fetch origin;git branch --track $1 origin/$1;git checkout $1"

        daniel = "!f() { local tmp=\"$*\"; echo \"$tmp\"; }; f"

[core]
        whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
        excludesfile = $HOME/git/.gitignore
        editor = vim

[color]
        ui = auto

[color "branch"]
        current = yellow bold
        local = green bold
        remote = cyan bold

[color "diff"]
        meta = yellow bold
        frag = cyan bold
        old = red bold
        new = green bold
        whitespace = red reverse

[color "status"]
        added = green bold
        changed = yellow bold
        untracked = red bold
        unmerged = cyan bold
